Качественные характеристики кода программы учета заявок на ремонт климатического оборудования
1. Полнота обработки ошибочных данных
Описание
Код программы предусматривает обработку различных типов ошибок, которые могут возникнуть во время выполнения. Это включает в себя обработку ошибок ввода данных, ошибок при работе с файлом базы данных, ошибок при выполнении операций с данными и прочее.

Реализация
Использование конструкции try-except для обработки исключений.
Отображение информативных сообщений пользователю при возникновении ошибок.
Логирование ошибок для дальнейшего анализа и устранения.
Пример кода
python
Копировать код
try:
    # Код для чтения данных из файла
    data = pd.read_csv(DATA_FILE_PATH)
except FileNotFoundError:
    print("Ошибка: Файл данных не найден.")
except pd.errors.EmptyDataError:
    print("Ошибка: Файл данных пуст.")
except Exception as e:
    print(f"Непредвиденная ошибка: {e}")
2. Наличие тестов для проверки допустимых значений входных данных
Описание
Для проверки корректности работы программы и обеспечения качества кода, реализованы тесты, которые проверяют допустимые значения входных данных. Тесты написаны с использованием библиотеки unittest.

Реализация
Написаны тесты для проверки различных сценариев ввода данных.
Использование модульного тестирования для проверки отдельных функций программы.
Пример кода
python
Копировать код
import unittest

class TestInputValidation(unittest.TestCase):
    def test_valid_phone_number(self):
        self.assertTrue(is_valid_phone_number("+79001234567"))

    def test_invalid_phone_number(self):
        self.assertFalse(is_valid_phone_number("12345"))

if __name__ == '__main__':
    unittest.main()
3. Наличие средств контроля корректности входных данных
Описание
Код программы включает валидацию входных данных, чтобы обеспечить их корректность и предотвратить возникновение ошибок.

Реализация
Проверка формата телефонного номера.
Проверка наличия всех обязательных полей.
Проверка формата дат.
Пример кода
python
Копировать код
def is_valid_phone_number(phone):
    return re.match(r'^\+7\d{10}$', phone) is not None

def validate_request_data(data):
    if not data['Номер заявки']:
        raise ValueError("Номер заявки не может быть пустым")
    if not is_valid_phone_number(data['Номер телефона']):
        raise ValueError("Неправильный формат номера телефона")
    # Дополнительные проверки
4. Наличие средств восстановления при сбоях оборудования
Описание
Программа предусматривает регулярное резервное копирование данных и возможность восстановления из резервной копии.

Реализация
Автоматическое создание резервных копий данных при значительных изменениях.
Инструкция по ручному резервному копированию и восстановлению данных.
Пример кода
python
Копировать код
import shutil

def backup_data():
    shutil.copyfile(DATA_FILE_PATH, BACKUP_FILE_PATH)

def restore_data():
    shutil.copyfile(BACKUP_FILE_PATH, DATA_FILE_PATH)
5. Наличие комментариев
Описание
Код программы содержит комментарии, объясняющие сложные и важные фрагменты кода, что облегчает его понимание и сопровождение.

Реализация
Комментарии добавлены для ключевых участков кода.
Объяснение логики работы сложных функций.
Пример кода
python
Копировать код
def calculate_statistics(data):
    """
    Функция для расчета статистики по заявкам.
    Возвращает количество выполненных заявок, среднее время выполнения и статистику по типам неисправностей.
    """
    completed_requests = data[data['Статус заявки'] == 'Завершена']
    avg_completion_time = completed_requests['Время выполнения'].mean()
    issue_stats = completed_requests['Тип неисправности'].value_counts()
    return len(completed_requests), avg_completion_time, issue_stats
6. Наличие проверки корректности передаваемых данных
Описание
Перед выполнением операций с данными, программа проверяет корректность передаваемых данных, чтобы предотвратить возможные ошибки.

Реализация
Валидация данных перед сохранением в базу данных.
Проверка данных перед выполнением операций редактирования и удаления.
Пример кода
python
Копировать код
def save_request(data):
    validate_request_data(data)
    # Сохранение данных в файл
    dataframe = pd.read_csv(DATA_FILE_PATH)
    dataframe = dataframe.append(data, ignore_index=True)
    dataframe.to_csv(DATA_FILE_PATH, index=False)
7. Наличие описаний основных функций
Описание
Основные функции программы снабжены описаниями (docstrings), которые объясняют их назначение, параметры и возвращаемые значения.

Реализация
Использование docstrings для описания функций и методов.
Указание параметров и типов данных.
Пример кода
python
Копировать код
def add_request(request_data):
    """
    Добавляет новую заявку в систему.

    Параметры:
    request_data (dict): Словарь с данными заявки.

    Возвращает:
    None
    """
    validate_request_data(request_data)
    dataframe = pd.read_csv(DATA_FILE_PATH)
    dataframe = dataframe.append(request_data, ignore_index=True)
    dataframe.to_csv(DATA_FILE_PATH, index=False)
Этот документ описывает качественные характеристики кода программы учета заявок на ремонт климатического оборудования, включая обработку ошибок, тестирование, валидацию данных, резервное копирование, комментарии и описания функций. Соблюдение этих характеристик обеспечивает высокое качество кода и его надежность в эксплуатации.





